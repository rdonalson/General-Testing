{"version":3,"sources":["../src/app/dp-calendar/service/calendar.service.ts"],"names":[],"mappings":"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","file":"calendar.service.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Moment} from 'moment';\nimport * as moment from 'moment';\nimport {WeekDays} from '../../common/types/week-days.type';\nimport {UtilsService} from '../../common/services/utils/utils.service';\nimport {ICalendarDay} from '../config/day.model';\nimport {ICalendarConfig} from '../config/calendar-config.model';\n\n@Injectable()\nexport class CalendarService {\n  readonly DAYS = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];\n\n  generateDaysIndexMap(firstDayOfWeek: WeekDays) {\n    const firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);\n    const daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));\n    return daysArr.reduce((map, day, index) => {\n      map[index] = day;\n      return map;\n    }, <{[key: number]: string}>{});\n  }\n\n  generateDaysMap(firstDayOfWeek: WeekDays) {\n    const firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);\n    const daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));\n    return daysArr.reduce((map, day, index) => {\n      map[day] = index;\n      return map;\n    }, <{[key: number]: string}>{});\n  }\n\n  generateMonthArray(firstDayOfWeek: WeekDays, dayInMonth: Moment, selectedDay: Moment = null): ICalendarDay[][] {\n    const monthArray: ICalendarDay[][] = [];\n    const firstDayOfMonth = dayInMonth.clone().startOf('month');\n    const firstDayOfWeekIndex = this.DAYS.indexOf(firstDayOfWeek);\n\n    const firstDayOfBoard = firstDayOfMonth;\n    while (firstDayOfBoard.day() !== firstDayOfWeekIndex) {\n      firstDayOfBoard.subtract(1, 'day');\n    }\n\n    const current = firstDayOfBoard.clone();\n    const daysOfCalendar: ICalendarDay[] = UtilsService.createArray(42).reduce((array: ICalendarDay[]) => {\n      array.push({\n        date: current.clone(),\n        selected: current.isSame(selectedDay, 'day'),\n        currentMonth: current.isSame(dayInMonth, 'month'),\n        prevMonth: current.isSame(dayInMonth.clone().subtract(1, 'month'), 'month'),\n        nextMonth: current.isSame(dayInMonth.clone().add(1, 'month'), 'month'),\n        currentDay: current.isSame(moment(), 'day')\n      });\n      current.add(1, 'd');\n      return array;\n    }, []);\n\n    daysOfCalendar.forEach((day, index) => {\n      const weekIndex = Math.floor(index / 7);\n\n      if (!monthArray[weekIndex]) {\n        monthArray.push([]);\n      }\n\n      monthArray[weekIndex].push(day);\n    });\n\n    return monthArray;\n  }\n\n  generateWeekdays(firstDayOfWeek: WeekDays, weekdayNames: {[key: string]: string}): string[] {\n    const weekdays: string[] = [];\n    const daysMap = this.generateDaysMap(firstDayOfWeek);\n\n    for (let dayKey in daysMap) {\n      if (daysMap.hasOwnProperty(dayKey)) {\n        weekdays[daysMap[dayKey]] = weekdayNames[dayKey];\n      }\n    }\n\n    return weekdays;\n  }\n\n  isDateDisabled(day: ICalendarDay, config: ICalendarConfig): boolean {\n    if (config.isDisabledCallback) {\n      return config.isDisabledCallback(day.date);\n    }\n\n    if (config.min && day.date.isBefore(config.min, 'd')) {\n      return true;\n    }\n\n    if (config.max && day.date.isAfter(config.max, 'd')) {\n      return true;\n    }\n\n    return false;\n  }\n}\n"]}