{"version":3,"sources":["../src/app/dp-day-picker/service/day-picker.service.ts"],"names":[],"mappings":"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","file":"day-picker.service.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {IDayPickerConfig} from './day-picker-config.model';\nimport * as moment from 'moment';\nimport {UtilsService} from '../../common/services/utils/utils.service';\nimport {ICalendarConfig} from '../../dp-calendar/config/calendar-config.model';\nimport {Moment} from 'moment';\nimport {FormControl} from '@angular/forms';\n\n@Injectable()\nexport class DayPickerService {\n  private defaultConfig: IDayPickerConfig = {\n    firstDayOfWeek: 'su',\n    calendarsAmount: 1,\n    format: 'DD-MM-YYYY',\n    monthFormat: 'MMM, YYYY',\n    closeOnSelect: true,\n    closeOnSelectDelay: 100,\n    weekdayNames: {\n      su: 'sun',\n      mo: 'mon',\n      tu: 'tue',\n      we: 'wed',\n      th: 'thu',\n      fr: 'fri',\n      sa: 'sat'\n    },\n    disableKeypress: false\n  };\n\n  private formatValues(config: IDayPickerConfig): void {\n    const {format, min, max} = config;\n\n    if (min && typeof min === 'string') {\n      config.min = moment(min, format);\n    }\n\n    if (max && typeof max === 'string') {\n      config.max = moment(max, format);\n    }\n  }\n\n  getConfig(config: IDayPickerConfig) {\n    const _config = Object.assign({}, this.defaultConfig, config);\n    this.formatValues(_config);\n    return _config;\n  }\n\n  generateCalendars(config: IDayPickerConfig, selected: Moment, month?: Moment): ICalendarConfig[] {\n    const base = (month && month.clone()) || (selected && selected.clone()) || moment();\n    return UtilsService.createArray(config.calendarsAmount).map((n: number, i: number) => ({\n      month: base.clone().add(i, 'month'),\n      selected: selected,\n      firstDayOfWeek: config.firstDayOfWeek,\n      weekdayNames: config.weekdayNames,\n      min: <Moment>config.min,\n      max: <Moment>config.max\n    }));\n  }\n\n  isDateValid(date: string, format: string): boolean {\n    if (date === '') {\n      return true;\n    }\n    return moment(date, format, true).isValid();\n  }\n\n  moveCalendars(config: IDayPickerConfig, selected: Moment, base: Moment, months: number): ICalendarConfig[] {\n    const month = base.clone().add(months, 'month');\n    return this.generateCalendars(config, selected, month);\n  }\n\n  isMinMonth(min: Moment, month): boolean {\n    return min ? month.clone().subtract(1, 'month').isBefore(min, 'month') : false;\n  }\n\n  isMaxMonth(max: Moment, month): boolean {\n    return max ? month.clone().add(1, 'month').isAfter(max, 'month') : false;\n  }\n\n  createValidator({minDate, maxDate}, dateFormat: string) {\n    let isValid: boolean;\n    let value: Moment;\n    const validators = [];\n\n    if (minDate) {\n      validators.push({\n        key: 'minDate',\n        isValid: () => {\n          const _isValid = value.isSameOrAfter(minDate, 'day');\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    if (maxDate) {\n      validators.push({\n        key: 'maxDate',\n        isValid: () => {\n          const _isValid = value.isSameOrBefore(maxDate, 'day');\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    return function validateInput(c: FormControl) {\n      isValid = true;\n\n      if (c.value) {\n        value = typeof c.value === 'string' ? moment(c.value, dateFormat) : c.value;\n      } else {\n        return null;\n      }\n\n      if (!value.isValid()) {\n        return {\n          format: {\n            given: c.value\n          }\n        };\n      }\n\n      const errors = validators.reduce((map, err) => {\n        if (!err.isValid()) {\n          map[err.key] = {\n            given: value\n          };\n        }\n\n        return map;\n      }, <any>{});\n\n      return !isValid ? errors : null;\n    };\n  }\n}"]}